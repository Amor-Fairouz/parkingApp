#!/usr/bin/env node

const ip = require("ip");
exports.ip = ip.address()
const port = normalizePort(process.env.PORT || '3000');
exports.port = port;
var app = require('../app');
app.set('port', port);

var debug = require('debug')('parking:server');
var http = require('http');
const packagejson = require('../package.json');

const appRootPath = require('app-root-path');
const fs = require('fs');
//require('events').EventEmitter.defaultMaxListeners = 200 //increase number of listeners to avoid warning of memory leak
var jwt = require('jsonwebtoken');
const privateKey = require('../policies/secrets').privateKey;
const decrypt = require('../policies/tools').decrypt
const nremails = require('../policies/nremails');
const path = require('path');
const cron = require('node-cron');
const sequelize = require("sequelize");
const Op = sequelize.Op;
const createDirectory = require('../policies/tools').createDirectory
const chalk = require('chalk');
const colors = require('colors/safe');

/**
 * Get port from environment and store in Express.
 */

const log = require('../policies/tools').log

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
//making sure these directories are created to prevent app crash
createDirectory('logs')
createDirectory('config')


const appStartedAt = Date(Date.now());

//on non-production envirment we need sequelize.sync({alter: true}) to make sure that the database schema is valid based on migration files
if (process.env.NODE_ENV == 'local') {
  models.sequelize.sync()
    .then(function() {
      //Listen on provided port, on all network interfaces.
      return server.listen(port, log().verbose(colors.bgBrightMagenta(
        `******** ${packagejson.name} ${packagejson.version} http://${ip.address()}:${port}/ NODE_ENV=${process.env.NODE_ENV} ********`
      )));
    })
    .catch(err => {
      return log().error({
        message: err,
        route: '[/bin/www]'
      });
    });
} else {
  models.sequelize.sync({
      alter: true
    })
    //models.sequelize.sync()
    .then(function() {
      return server.listen(port, log().verbose(colors.bgBlue(
        `******** ${packagejson.name} ${packagejson.version} http://${ip.address()}:${port}/ NODE_ENV=${process.env.NODE_ENV} ********`
      )));
    })
    .catch(err => {
      return log().error({
        message: err,
        route: '[/bin/www]'
      });
    });
}


server.on('error', onError);
server.on('listening', onListening);

/**
 *  socket
 */
/*  let rooms = Object.keys(socket.rooms);
          console.log(rooms);*/
var connectedUser;
global.io = require("socket.io")(server);
io.sockets
  //middleware to verify token
  .use(function(socket, next) {
    //decoding token
    return jwt.verify(socket.request._query.token, privateKey, function(err,
      decoded) {
      if (err) {
        return log().warn({
          message: err,
          route: '[/bin/www/socket]'
        });
      } else {
        decoded = {
          iv: decoded.iv,
          encryptedData: decoded.encryptedData
        }
        decoded = JSON.parse(decrypt(decoded))
          //if token exist in session table so its valid, else its not
        return models.Session.findOne({
            where: {
              token: socket.request._query.token
            }
          })
          .then(session => {
            if (session == null) {
              nremails.invalidTokenLoginAttempt(decoded.user, 'req',
                'en');
              //token not found in session so its not valid
              return log(decoded.user.email).warn({
                message: `[INVALID_TOKEN] ${decoded.user.email} user.id=${decoded.user.id}`,
                route: '[/bin/www/socket]',
                ip: socket.handshake.address,
                userAgent: socket.handshake.headers['user-agent'],
                token: socket.request._query.token
              })
            }
            if ((socket.handshake.address == decoded.auth.ip) && (
                socket.handshake.headers['user-agent'] == decoded.auth.userAgent
              )) {
              if (decoded.user) {
                connectedUser = decoded.user;
                return next();
              } else {
                log().error({
                  message: `token doesnt have user object`,
                  token: socket.request._query.token,
                  route: '[/bin/www/socket]',
                  ip: socket.handshake.address,
                  userAgent: socket.handshake.headers['user-agent']
                })
              }
            } else {
              log().warn({
                message: `[TOKEN_MISMATCH_SESSION] ${decoded.user.email} user.id=${decoded.user.id}`,
                route: '[/bin/www/socket]',
                ip: socket.handshake.address,
                userAgent: socket.handshake.headers['user-agent'],
                token: socket.request._query.token
              })
            }
          })
          .catch(err => {
            log().error({
              message: err
            });
            if (process.env.NODE_ENV == 'production') {
              return res.status(522).send('database fail');
            } else {
              return res.status(522).send(err);
            }
          })
      }
    });
  })
  .on("connection", socket => {
    //socket logic here, we use rooms to easily handle multiple connections per user
    log().verbose({
        message: `[connection] ${connectedUser.email} socket.id=${socket.id} connected to socket`,
        ip: socket.handshake.address,
        userAgent: socket.handshake.headers['user-agent']
      })
      //super join special rooms
    if (connectedUser.role == 1) {
      //joining user room
      socket.join(`user_${connectedUser.id}`, () => {
        //log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room user_${connectedUser.id} socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
      });
      //joining group room
      socket.join(`groups`, () => {
        //log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room groups socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
      });
      //joining entreprise room
      socket.join(`pharmacies`, () => {
        //log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room entreprises socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
      });
    } else {
      //joining user room
      socket.join(`user_${connectedUser.id}`, () => {
        // log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room user_${connectedUser.id} socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
      });
      //joining group room
      socket.join(`group_${connectedUser.GroupId}`, () => {
        //log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room group_${connectedUser.GroupId} socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
      });
      //joining entreprise room
      socket.join(`pharmacy_${connectedUser.PharmacyId}`, () => {
        //log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room entreprise_${connectedUser.EntrepriseId} socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
      });
      //joining managers room of the entreprise
      if (connectedUser.role == 3 || connectedUser.role == 2) {
        socket.join(`pharmacy_${connectedUser.PharmacyId}_managers`, () => {
          //log(connectedUser.email).verbose({ message: `${connectedUser.email} joined room entreprise_${connectedUser.EntrepriseId}_managers socket.id=${socket.id}`, ip: socket.handshake.address, userAgent: socket.handshake.headers['user-agent'] })
        });
      }
    }

    socket.on('disconnect', (reason) => {
      //notifying users of same entreprise
      log(connectedUser.email).verbose({
        message: `[disconnect] ${connectedUser.email} user.id=${connectedUser.id} clientsCount ${socket.nsp.server.eio.clientsCount} socket.id=${socket.id} reason=${reason}`,
        ip: socket.handshake.address,
        userAgent: socket.handshake.headers['user-agent']
      });
      return io.sockets.to(`pharmacie_${connectedUser.EntrepriseId}`).emit(
        'userDisconnected', {
          message: `userId=${connectedUser.firstName} disconnnencted`,
          data: connectedUser.email
        });
    });

    //emitting nonseen notifications when user connects
    socket.on('requestNotSeenNotifications', () => {
      //log(cu.id).verbose({ message: `[notSeenNotifications] ${cu.email} id=${cu.id} role=${cu.role}` })
      log(cu.id).verbose({
        message: colors.bgMagenta(
          `[requestNotSeenNotifications] user.id=${cu.id} ${cu.email}`
        )
      })
      return notSeenNotifications(cu.id)
    });

    socket.on('error', (error) => {
      log(connectedUser.email).error({
        message: error
      })
    });
    //emitting nonseen notifications
    socket.on('NotSeenNotifications', () => {
      return models.Notification.findAll({
          where: {
            ReceiverId: connectedUser.id,
            isSeen: false,
            isDeleted: false
          }
        })
        .then(notifications => {
          log().verbose({
            message: `[NotSeenNotifications] ${connectedUser.email} received ${notifications.length} Not Seen Notifications`
          })
          return io.sockets.in(`user_${connectedUser.id}`).emit(
            'NotSeenNotifications', {
              messages: `you have ${notifications.length} notifications`,
              data: notifications
            })
        })
        .catch(err => {
          log().error({
            message: err,
            route: '[/bin/www/socket]',
            ip: socket.handshake.address,
            userAgent: socket.handshake.headers['user-agent']
          });
        })
    });

    //make read notifications status seen
    socket.on("seenNotifications", seenNotificationsArrayOfid => {
      return models.Notification.update({
          isSeen: true
        }, {
          where: {
            id: {
              [Op.in]: seenNotificationsArrayOfid
            }
          }
        })
        .then(updatedNotification => {
          return log().verbose({
            message: `[seenNotifications] ${connectedUser.email} has seen notifications of ids ${seenNotificationsArrayOfid}`,
            ip: socket.handshake.address,
            userAgent: socket.handshake.headers['user-agent']
          });
        })
        .catch(err => {
          return log().error({
            message: err,
            route: '[/bin/www/socket]',
            ip: socket.handshake.address,
            userAgent: socket.handshake.headers['user-agent']
          });
        })
    });

    /*socket.on('disconnecting', (reason) => {
        log().verbose({ message: `[disconnecting]:clientsCount=${socket.nsp.server.eio.clientsCount} userId=${connectedUser.id} socket.id=${socket.id} reason=${reason}` });
    });*/
  })

/**
 * cron jobs
 */

//update users vacations every 28th of month
cron.schedule('58 23 28 * *', () => {
  // cron.schedule('* * * * * *', () => {
  return models.User.findAll({
      where: {
        isActive: true,
        role: {
          [Op.in]: [3, 4]
        }
      }
    })
    .then(users => {
      if (users.length == 0) return log().verbose({
        message: `no eligible users to update their vacationBalance!`
      })
      for (let u = 0; u < users.length; u++) {
        if (users[u].contractType == 'CDI') {
          users[u].vacationBalance = users[u].vacationBalance + 2.5;
          users[u].save()
            .then(savedUser => {
              return log(users[u].email).verbose({
                message: `${users[u].email} vacationBalance was updated to be ${users[u].vacationBalance}`
              })
            })
            .catch(err => {
              log().error({
                message: err,
                route: `[/bin/www/cron]`
              });
            })
        }
      }
    })
    .catch(err => {
      return log().error({
        message: err,
        route: `[/bin/www/cron]`
      });
    })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port == 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr == 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}


exports.appStartedAt = appStartedAt;
